// это программка. Работа с потоками, в одном потоке подруливаем одним колесом, в другом - снимаем показания энкодера с другого мотора. Причем подруливаем не просто так, а с помощью интегрально-дифференциального метода. Тут нам рассказывали, как правильно подбирать коэффициенты. А еще тут запоминаем двва последних показания энкодера для подравнивания, а не одно.

var __interpretation_started_timestamp__;
var pi = 3.14159265;
var e3 =  brick.encoder(B1);
var e4 =  brick.encoder(B4);
var init = -100;

/* Threads declarations */

var first;



var m3 = brick.motor(M1);

var m4 = brick.motor(M4);





/* Threads */

first = function()

{

	

var diffPrev;

	while(1){

	//brick.encoder(B3).reset();

	//brick.encoder(B4).reset();

	p = - m3.power();

	diff = (e4.readRawData() + e3.readRawData()) ;

	
	

	power = p  + 2*diff - 1*(diff - diffPrev) + 0.5*(diffPrev+diff);

	m4.setPower(power);

	

	//print ("power",  power, "p", p , "diff", diff);

	diffPrev = diff;

	

	script.wait(20);

		}

	return;

}



var main = function()

{

	__interpretation_started_timestamp__ = Date.now();

	e3.reset();

	e4.reset();

	var enprev3 = 0;

	var enprev4 = 0;

	Threading.start("first");

	script.wait(2000);

	

	while (init <105) {

		for (i = 0; i <5; i++)

			init ++;

	m3.setPower(init);

	script.wait(5000);



	print("power", m3.power(),"encoders",(e3.readRawData() - enprev3), ',',( e4.readRawData()-enprev4));

	enprev3 = e3.readRawData();

	enprev4 = e4.readRawData();

	}

	return;

}